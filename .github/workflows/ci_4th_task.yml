name: Run Tests and Build

on:
  push:
    branches:
      - main
      - 4th_task_branch
  pull_request:
    branches:
      - main
      - 4th_task_branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.18.0"

      - name: Install NPM
        run: npm install

      - name: Run tests
        run: npm test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.18.0"

      - name: Install NPM
        run: npm install

      - name: Build App
        run: npm run build

      - name: List Build Output Files
        run: ls -al build/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/

  sonar:
    name: SonarQube Scan (frontend)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install deps
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=url_shortener_front
            -Dsonar.sources=src
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  publish:
    needs: sonar
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Install & authenticate Yandex Cloud CLI
        env:
          YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo cp "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

          echo "$YC_SERVICE_ACCOUNT_KEY" > yc-key.json
          yc config set service-account-key yc-key.json

      - name: Configure Docker for Yandex Registry
        run: yc container registry configure-docker

      - name: Build and push Docker image
        run: |
          IMAGE=cr.yandex/crpqftu9a63clb7akat7/url-shortener-front:latest
          docker build -t $IMAGE .
          docker push $IMAGE


  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install & authenticate Yandex Cloud CLI
        env:
          YC_SERVICE_ACCOUNT_KEY: ${{ secrets.YC_SERVICE_ACCOUNT_KEY }}
        run: |
          curl https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          sudo cp "$HOME/yandex-cloud/bin/yc" /usr/local/bin/yc

          echo "$YC_SERVICE_ACCOUNT_KEY" > yc-key.json
          yc config set service-account-key yc-key.json

      - name: Fetch Kubernetes credentials
        env:
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
          K8S_CLUSTER_ID: ${{ secrets.K8S_CLUSTER_ID }}
        run: |
          yc config set cloud-id $YC_CLOUD_ID
          yc config set folder-id $YC_FOLDER_ID
          mkdir -p ~/.kube
          yc managed-kubernetes cluster get-credentials \
            --id $K8S_CLUSTER_ID \
            --external \
            --kubeconfig ~/.kube/config \

          # kubectl get nodes
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.29.0"

      - name: Restart backend Deployment
        run: |
          kubectl rollout restart deployment/url-shortener-front
          kubectl rollout status deployment/url-shortener-front
